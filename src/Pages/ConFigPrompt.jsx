// src/Components/Pages/ConFigPrompt.jsx

import React, { useState, useEffect } from 'react';
import Listcauhoi from './Listcauhoi'; // Import component Listcauhoi m·ªõi
import { localeSrvice } from '../Services/LocalService';
import { geminiService } from '../Services/GenminiCallService';
import ToBack from '../Components/ToBack';


function ConFigPrompt() { 

  const [soCauHoi, setSoCauHoi] = useState(10);
  const [doKho, setDoKho] = useState("d·ªÖ");
  const [danhSachLinhVuc, setDanhSachLinhVuc] = useState([]);
  const [selectedTopicDisplay, setSelectedTopicDisplay] = useState('L·ªãch s·ª≠');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [showSoCauHoiInput, setShowSoCauHoiInput] = useState(false);
  const [showDoKhoSelect, setShowDoKhoSelect] = useState(false);
  const [showQuestionModal, setShowQuestionModal] = useState(false);

  useEffect(() => {
    const rawLinhVuc = localeSrvice.getSelectFields();
    if (rawLinhVuc) {
      try {
        const parsedLinhVuc = JSON.parse(rawLinhVuc);
        if (Array.isArray(parsedLinhVuc) && parsedLinhVuc.length > 0) {
          setDanhSachLinhVuc(parsedLinhVuc);
          setSelectedTopicDisplay(parsedLinhVuc.join(", "));
        } else {
          setDanhSachLinhVuc(['Ch∆∞a ch·ªçn lƒ©nh v·ª±c']);
          setSelectedTopicDisplay('Ch∆∞a ch·ªçn lƒ©nh v·ª±c');
        }
      } catch (e) {
        console.error("L·ªói khi parse danh s√°ch lƒ©nh v·ª±c t·ª´ localStorage:", e);
        setDanhSachLinhVuc(['L·ªói t·∫£i lƒ©nh v·ª±c']);
        setSelectedTopicDisplay('L·ªói t·∫£i lƒ©nh v·ª±c');
      }
    } else {
      setDanhSachLinhVuc(['Ch∆∞a ch·ªçn lƒ©nh v·ª±c']);
      setSelectedTopicDisplay('Ch∆∞a ch·ªçn lƒ©nh v·ª±c');
    }
  }, []);

  const handleSoCauHoiChange = (e) => {
    setSoCauHoi(parseInt(e.target.value) || 0);
  };

  const handleDoKhoChange = (e) => {
    setDoKho(e.target.value);
  };

  // H√†m n√†y ch·ªâ c√≤n nhi·ªám v·ª• x√≥a d·ªØ li·ªáu c√¢u h·ªèi v√† l·ªói
  const handleClearQuestions = () => {
    setQuestions([]);
    setError(null);
    setLoading(false);
    // L∆∞u √Ω: showQuestionModal s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Listcauhoi ho·∫∑c ConFigPrompt khi g·ªçi Listcauhoi
    console.log("D·ªØ li·ªáu c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√≥a.");
  };

  const xulyTaoCauHoi = async () => {
    if (danhSachLinhVuc.length === 0 || danhSachLinhVuc[0] === 'Ch∆∞a ch·ªçn lƒ©nh v·ª±c' || danhSachLinhVuc[0] === 'L·ªói t·∫£i lƒ©nh v·ª±c') {
      setError("Vui l√≤ng ch·ªçn lƒ©nh v·ª±c y√™u th√≠ch tr∆∞·ªõc khi t·∫°o c√¢u h·ªèi.");
      return;
    }
    if (soCauHoi <= 0) {
        setError("S·ªë c√¢u h·ªèi ph·∫£i l·ªõn h∆°n 0.");
        return;
    }

    setLoading(true);
    setError(null);
    setQuestions([]);
    setShowQuestionModal(false); // ƒê·∫£m b·∫£o modal ƒë√≥ng tr∆∞·ªõc khi t·∫°o m·ªõi

    const linhVucString = danhSachLinhVuc.join(', ');

    const responseSchema = {
      type: "ARRAY",
      items: {
        type: "OBJECT",
        properties: {
          topic: { "type": "STRING" },
          question: { "type": "STRING" },
          answers: {
            "type": "ARRAY",
            "items": { "type": "STRING" }
          },
          correctAnswerIndex: { "type": "NUMBER" } // 0-indexed
        },
        required: ["topic", "question", "answers", "correctAnswerIndex"]
      }
    };

    const prompt = `T·∫°o m·ªôt danh s√°ch ${soCauHoi} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ c√°c lƒ©nh v·ª±c sau: ${linhVucString}. M·ªói c√¢u h·ªèi c√≥ ƒë·ªô kh√≥ "${doKho}". M·ªói c√¢u h·ªèi ph·∫£i c√≥ 4 l·ª±a ch·ªçn ƒë√°p √°n v√† ch·ªâ r√µ ƒë√°p √°n ƒë√∫ng (t·ª´ 0 ƒë·∫øn 3). Ph√¢n chia c√¢u h·ªèi ƒë·ªÅu cho c√°c lƒ©nh v·ª±c ƒë√£ cho. ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng JSON Array, m·ªói ƒë·ªëi t∆∞·ª£ng trong m·∫£ng c√≥ c·∫•u tr√∫c: { "topic": "t√™n lƒ©nh v·ª±c", "question": "n·ªôi dung c√¢u h·ªèi", "answers": ["ƒë√°p √°n A", "ƒë√°p √°n B", "ƒë√°p √°n C", "ƒë√°p √°n D"], "correctAnswerIndex": s·ªë_index_ƒë√°p_√°n_ƒë√∫ng_ (0,1,2,3) }.`;

    try {
    let result = await geminiService.generateContent(prompt, {
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: responseSchema
        }
      });
 result = result.replace(/```json\s*([\s\S]*?)\s*```/, '$1').trim();
                
                // B∆∞·ªõc 2: Lo·∫°i b·ªè c√°c d·∫•u nh√°y k√©p th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói (n·∫øu c√≥)
                // v√† c√°c k√Ω t·ª± tr·∫Øng/newline c√≤n s√≥t l·∫°i.
                result = result.trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± xu·ªëng d√≤ng ·ªü ƒë·∫ßu/cu·ªëi
                if (result.startsWith('"') && result.endsWith('"')) {
                    // N·∫øu chu·ªói v·∫´n c√≤n b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c b·∫±ng d·∫•u nh√°y k√©p, lo·∫°i b·ªè ch√∫ng.
                    // ƒêi·ªÅu n√†y x·ª≠ l√Ω tr∆∞·ªùng h·ª£p ph·∫£n h·ªìi c√≥ th·ªÉ l√†: "[...]" ho·∫∑c "\n"[...]"\n"
                    result = result.substring(1, result.length - 1);
                }
                // Sau khi lo·∫°i b·ªè d·∫•u nh√°y k√©p, c·∫ßn trim l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn
                result = result.trim();

                
               result = JSON.parse(result);
      if (Array.isArray(result)) {
        setQuestions(result);
        if (result.length > 0) {
            setShowQuestionModal(true); // Hi·ªÉn th·ªã modal sau khi c√≥ c√¢u h·ªèi
        }
        console.log("C√¢u h·ªèi ƒë√£ t·∫°o:", result);
      } else {
        setError("Ph·∫£n h·ªìi t·ª´ Gemini kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON mong mu·ªën ho·∫∑c kh√¥ng ph·∫£i m·∫£ng.");
        console.error("Ph·∫£n h·ªìi Gemini kh√¥ng ph·∫£i m·∫£ng:", result);
      }
    } catch (err) {
      setError("ƒê√£ x·∫£y ra l·ªói khi t·∫°o c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.");
      console.error("L·ªói g·ªçi Gemini API:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center bg-gray-100 p-4 font-inter">
    <div className='m-5'><ToBack targetPath="/SelectField"></ToBack></div>
      <div className="w-full max-w-sm flex items-center justify-center pt-8 pb-4">
        {/* Icon (c√≥ th·ªÉ thay b·∫±ng icon th·ª±c t·∫ø n·∫øu c√≥) */}
        <div className="w-16 h-16 bg-orange-200 rounded-full flex items-center justify-center mr-4">
          <span className="text-4xl" role="img" aria-label="book">üìö</span>
        </div>
        <h2 className="text-3xl font-bold text-gray-800 text-center">{selectedTopicDisplay}</h2>
      </div>

      {/* Ph·∫ßn C·∫•u h√¨nh */}
      <div className="w-full max-w-sm bg-white rounded-xl shadow-md p-6 mt-8 space-y-4">
        <h3 className="text-2xl font-bold text-gray-800 mb-6">C·∫•u h√¨nh</h3>


        {/* M·ª•c S·ªë c√¢u h·ªèi */}
        <div
          className="flex items-center justify-between p-4 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition duration-200"
          onClick={() => setShowSoCauHoiInput(!showSoCauHoiInput)}
        >
          <span className="text-lg font-medium text-gray-700">S·ªë c√¢u h·ªèi</span>
          <div className="flex items-center">
            <span className="text-lg text-gray-600 mr-2">{soCauHoi}</span>
            <span className="text-xl text-gray-500">‚Ä∫</span> {/* M≈©i t√™n */}
          </div>
        </div>
        {showSoCauHoiInput && (
          <input
            type="number"
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mt-2"
            placeholder="Nh·∫≠p s·ªë c√¢u h·ªèi"
            value={soCauHoi}
            onChange={handleSoCauHoiChange}
            min="1"
          />
        )}

        {/* M·ª•c ƒê·ªô kh√≥ */}
        <div
          className="flex items-center justify-between p-4 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition duration-200"
          onClick={() => setShowDoKhoSelect(!showDoKhoSelect)}
        >
          <span className="text-lg font-medium text-gray-700">ƒê·ªô kh√≥</span>
          <div className="flex items-center">
            <span className="text-lg text-gray-600 mr-2">{doKho}</span>
            <span className="text-xl text-gray-500">‚Ä∫</span> {/* M≈©i t√™n */}
          </div>
        </div>
        {showDoKhoSelect && (
          <select
            className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 mt-2"
            value={doKho}
            onChange={handleDoKhoChange}
          >
            <option value="d·ªÖ">D·ªÖ</option>
            <option value="trung b√¨nh">Trung b√¨nh</option>
            <option value="kh√≥">Kh√≥</option>
          </select>
        )}
      </div>

      {/* N√∫t B·∫Øt ƒë·∫ßu */}
      <button
        onClick={xulyTaoCauHoi}
        disabled={loading}
        className={`
          mt-10 px-12 py-4 rounded-full text-white font-semibold text-xl shadow-lg
          transition duration-300 ease-in-out transform hover:scale-105
          ${loading ? 'bg-green-400 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'}
        `}
      >
        {loading ? 'ƒêang t·∫°o c√¢u h·ªèi...' : 'B·∫Øt ƒë·∫ßu'}
      </button>

      {/* Hi·ªÉn th·ªã l·ªói */}
      {error && (
        <div className="mt-8 text-red-600 bg-red-100 p-4 rounded-lg w-full max-w-lg text-center">
          {error}
        </div>
      )}

      {/* Render component Listcauhoi n·∫øu showQuestionModal l√† true */}
      {showQuestionModal && (
        <Listcauhoi
          questions={questions}
          onClose={() => setShowQuestionModal(false)}
          onClearQuestions={handleClearQuestions}
          onRegenerateQuiz={xulyTaoCauHoi} // Truy·ªÅn h√†m t·∫°o c√¢u h·ªèi xu·ªëng Listcauhoi
        />
      )}
    </div>
  );
}

export default ConFigPrompt;
